variables {
    global:
        0: Setup
        1: ForLoop
        2: GameStart
        3: Mode
        4: ForPlayer
    player:
        0: Partner
}
rule ("Workshop Settings") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(Mode, Workshop Setting Combo(Custom String("Mode", Null, Null, Null), Custom String("Game Type", Null, Null, Null), 0, Array(Custom String("Random Partner", Null, Null, Null), Custom String("Fixed Partner", Null, Null, Null)), 0));
    }
}

rule ("Pre Setup") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(GameStart, False);
        Set Match Time(0);
    }
}

rule ("Setup - Global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Wait Until(Is True For All(All Players(All Teams), Has Spawned(Current Array Element)), 10);
        For Global Variable(ForLoop, 0, If-Then-Else(Global.Mode, 12, Number Of Players(All Teams)), 1);
            Set Global Variable(ForPlayer, If-Then-Else(Global.Mode, Players In Slot(Global.ForLoop, All Teams), Global.ForPlayer));
            If(Compare(Modulo(Global.ForLoop, 2), ==, 0));
                Start Forcing Player To Be Hero(Global.ForPlayer, Hero(Lúcio));
                Set Status(Global.ForPlayer, Null, Phased Out, 9999);
                Set Player Variable(Global.ForPlayer, Partner, If-Then-Else(Global.Mode, Players In Slot(Add(Global.ForLoop, 1), All Teams), Value In Array(All Players(All Teams), Add(Global.ForLoop, 1))));
            Else;
                Start Forcing Player To Be Hero(Global.ForPlayer, Hero(Bastion));
                Disallow Button(Global.ForPlayer, Button(Primary Fire));
                Set Knockback Dealt(Global.ForPlayer, 0);
                Set Player Variable(Global.ForPlayer, Partner, If-Then-Else(Global.Mode, Players In Slot(Subtract(Global.ForLoop, 1), All Teams), Value In Array(All Players(All Teams), Subtract(Global.ForLoop, 1))));
                Attach Players(Global.ForPlayer, If-Then-Else(Global.Mode, Players In Slot(Subtract(Global.ForLoop, 1), All Teams), Value In Array(All Players(All Teams), Subtract(Global.ForLoop, 1))), Vector(0, 1.5, 0));
            End;
        End;
        Wait(0.016, Ignore Condition);
        Set Global Variable(Setup, True);
        Big Message(All Players(All Teams), Custom String("Game starts in 10 seconds.", Null, Null, Null));
        Wait(10, Ignore Condition);
        Big Message(All Players(All Teams), Custom String("START!", Null, Null, Null));
        Set Global Variable(GameStart, True);
    }
}

rule ("Setup - Player") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Enable Death Spectate All Players(Event Player);
        Enable Death Spectate Target HUD(Event Player);
        Disable Built-In Game Mode Respawning(Event Player);
        Set Healing Received(Event Player, 0);
    }
}

rule ("Late Join") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Global.Setup == True;
    }
    actions {
        Wait Until(And(Has Spawned(Event Player), Is Alive(Event Player)), 30);
        Kill(Event Player, Null);
        Big Message(Event Player, Custom String("Joined while game active", Null, Null, Null));
    }
}

rule ("Kill player if no partner") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Partner == Null;
        Global.Setup == True;
    }
    actions {
        Wait Until(And(Has Spawned(Event Player), Is Alive(Event Player)), 30);
        Kill(Event Player, Null);
        Big Message(Event Player, Custom String("No partner assigned", Null, Null, Null));
    }
}

rule ("Kill partner on death") {
    event {
        Player Died;
        All;
        All;
    }
    actions {
        Kill((Event Player).Partner, Attacker);
    }
}

disabled rule ("Victory") {
    event {
        Ongoing - Global;
    }
    conditions {
        Number Of Living Players(All Teams) <= 2;
        Is Game In Progress == True;
    }
    actions {
        Declare Player Victory(Random Value In Array(All Living Players(All Teams)));
    }
}

rule ("Lucio on ground") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is On Ground(Event Player) == True;
        Global.GameStart == True;
    }
    actions {
        Set Status(Event Player, Null, Burning, 9999);
        Set Status((Event Player).Partner, Null, Burning, 9999);
        While(True);
            Damage((Event Player).Partner, Event Player, 2.5);
            Wait(0.016, Abort When False);
        End;
    }
}

rule ("Lucio off ground") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is On Ground(Event Player) == False;
        Global.GameStart == True;
    }
    actions {
        Clear Status(Event Player, Burning);
        Clear Status((Event Player).Partner, Burning);
    }
}

rule ("Link partner health") {
    event {
        Player Took Damage;
        All;
        Bastion;
    }
    actions {
        Set Player Health((Event Player).Partner, Health(Event Player));
    }
}

rule ("Bastion allow shooting") {
    event {
        Ongoing - Each Player;
        All;
        Bastion;
    }
    conditions {
        Global.GameStart == True;
    }
    actions {
        Allow Button(Event Player, Button(Primary Fire));
    }
}

