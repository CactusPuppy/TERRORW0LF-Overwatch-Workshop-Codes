settings
{
	main
	{
		Description: "Play in a team of Bastion and Lucio.\nLucio is responsible for movement, Bastion for killing the enemy.\nTouching the ground hurts you."
		Mode Name: "Flying Tank"
	}
	lobby
	{
		Map Rotation: After A Game
		Return To Lobby: Never
	}
	modes
	{
		Deathmatch
		{
			disabled maps
			{
				Black Forest
				Black Forest Winter
				Blizzard World Winter
				Castillo
				Château Guillard Halloween
				Ecopoint: Antarctica
				Ecopoint: Antarctica Winter
				Eichenwalde Halloween
				Hanamura Winter
				Hollywood Halloween
				King's Row Winter
				Lijiang Control Center Lunar New Year
				Lijiang Garden Lunar New Year
				Lijiang Night Market Lunar New Year
				Necropolis
				Petra
				Workshop Chamber
				Workshop Expanse
				Workshop Expanse Night
				Workshop Green Screen
				Workshop Island
				Workshop Island Night
			}
			Game Length In Minutes: 10
			Score To Win: 20
			Self Initiated Respawn: Off
		}
		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn As Random Hero: On
			Spawn Health Packs: Disabled
		}
	}
	heroes
	{
		General
		{
			Bastion
			{
				Damage Dealt: 60%
				Infinite Ultimate Duration: On
				No Ammunition Requirement: On
				Primary Fire: Off
				Quick Melee: Off
				Reconfigure: Off
				Self-Repair: Off
				Spawn With Ultimate Ready: On
			}
			Lúcio
			{
				Health: 150%
				Movement Gravity: 80%
				Movement Speed: 125%
				No Ammunition Requirement: On
				Primary Fire: Off
				Quick Melee: Off
				Receive Headshots Only: On
				Soundwave Cooldown Time: 150%
				Soundwave Knockback Scalar: 120%
				Ultimate Ability Sound Barrier: Off
			}
			enabled heroes
			{
				Bastion
				Lúcio
			}
		}
	}
}
variables {
    global:
        0: NotSetup
        1: ForLoop
        2: GameStart
        3: Mode
        4: ForPlayer
    player:
        0: Partner
        1: Protected
}
rule ("Workshop Settings") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(Mode, Workshop Setting Combo(Custom String("Mode", Null, Null, Null), Custom String("Game Type", Null, Null, Null), 0, Array(Custom String("Random Partner", Null, Null, Null), Custom String("Fixed Partner", Null, Null, Null)), 0));
    }
}

rule ("Pre Setup") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(GameStart, False);
        Set Match Time(0);
    }
}

rule ("Setup - Global") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Wait(5, Ignore Condition);
        For Global Variable(ForLoop, 0, If-Then-Else(Global.Mode, 12, Number Of Players(All Teams)), 1);
            Set Global Variable(ForPlayer, If-Then-Else(Global.Mode, Players In Slot(Global.ForLoop, All Teams), Value In Array(All Players(All Teams), Global.ForLoop)));
            Wait(0.016, Ignore Condition);
            Log To Inspector(Global.ForPlayer);
            If(Compare(Modulo(Global.ForLoop, 2), ==, 0));
                Start Forcing Player To Be Hero(Global.ForPlayer, Hero(Lúcio));
                Set Status(Global.ForPlayer, Null, Phased Out, 9999);
                Set Invisible(Global.ForPlayer, All);
                Set Player Score(Global.ForPlayer, -9999);
                Set Player Variable(Global.ForPlayer, Partner, If-Then-Else(Global.Mode, Players In Slot(Add(Global.ForLoop, 1), All Teams), Value In Array(All Players(All Teams), Add(Global.ForLoop, 1))));
            Else;
                Start Forcing Player To Be Hero(Global.ForPlayer, Hero(Bastion));
                Disallow Button(Global.ForPlayer, Button(Primary Fire));
                Set Knockback Dealt(Global.ForPlayer, 0);
                Set Player Variable(Global.ForPlayer, Partner, If-Then-Else(Global.Mode, Players In Slot(Subtract(Global.ForLoop, 1), All Teams), Value In Array(All Players(All Teams), Subtract(Global.ForLoop, 1))));
                Attach Players(Global.ForPlayer, If-Then-Else(Global.Mode, Players In Slot(Subtract(Global.ForLoop, 1), All Teams), Value In Array(All Players(All Teams), Subtract(Global.ForLoop, 1))), Vector(0, 2, 0));
            End;
        End;
        Wait(0.016, Ignore Condition);
        Set Global Variable(NotSetup, True);
        Big Message(All Players(All Teams), Custom String("Game starts in 10 seconds.", Null, Null, Null));
        Wait(3, Ignore Condition);
        For Global Variable(ForLoop, 0, Number Of Players(All Teams), 1);
            Press Button(Value In Array(All Players(All Teams), Global.ForLoop), Button(Ultimate));
        End;
        Wait(7, Ignore Condition);
        Big Message(All Players(All Teams), Custom String("START!", Null, Null, Null));
        Set Global Variable(GameStart, True);
    }
}

rule ("Setup - Player") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Enable Death Spectate All Players(Event Player);
        Enable Death Spectate Target HUD(Event Player);
        Disable Built-In Game Mode Respawning(Event Player);
        Set Healing Received(Event Player, 0);
    }
}

rule ("Late Join") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Global.NotSetup == True;
    }
    actions {
        Wait Until(And(Has Spawned(Event Player), Is Alive(Event Player)), 30);
        Kill(Event Player, Null);
        Big Message(Event Player, Custom String("Joined while game active", Null, Null, Null));
    }
}

rule ("Kill player if no partner") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Partner == Null;
        Global.NotSetup == True;
    }
    actions {
        Wait Until(And(Has Spawned(Event Player), Is Alive(Event Player)), 30);
        Kill(Event Player, Null);
        Big Message(Event Player, Custom String("No partner assigned", Null, Null, Null));
    }
}

rule ("Respawn on death") {
    event {
        Player Died;
        All;
        Bastion;
    }
    actions {
        Destroy Icon(Last Created Entity);
        Create Icon(All Players(All Teams), Add(Position Of(Event Player), Vector(0, 2, 0)), Halo, Visible To and Position, Color(Orange), False);
        Clear Status(Event Player, Burning);
        Clear Status((Event Player).Partner, Burning);
        Set Player Variable((Event Player).Partner, Protected, True);
        Detach Players(Event Player);
        Respawn((Event Player).Partner);
        Respawn(Event Player);
        Set Status(Event Player, Null, Phased Out, 5);
        Disallow Button(Event Player, Button(Primary Fire));
        Big Message(Array(Event Player, (Event Player).Partner), Custom String("5 sec spawn protection!", Null, Null, Null));
        Wait Until(And(Is Alive(Event Player), Is Alive((Event Player).Partner)), 3);
        Attach Players(Event Player, (Event Player).Partner, Vector(0, 0.5, 0));
        Wait(3, Ignore Condition);
        Press Button(Event Player, Button(Ultimate));
        Wait(2, Ignore Condition);
        Set Player Variable((Event Player).Partner, Protected, False);
        Allow Button(Event Player, Button(Primary Fire));
        Destroy Icon(Last Created Entity);
        Big Message(Array(Event Player, (Event Player).Partner), Custom String("GO!", Null, Null, Null));
    }
}

rule ("Lucio on ground") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is On Ground(Event Player) == True;
        (Event Player).Protected == False;
        Global.GameStart == True;
    }
    actions {
        Set Status(Event Player, Null, Burning, 9999);
        Set Status((Event Player).Partner, Null, Burning, 9999);
        While(True);
            Damage((Event Player).Partner, (Event Player).Partner, 2.5);
            Wait(0.016, Abort When False);
        End;
    }
}

rule ("Lucio off ground") {
    event {
        Ongoing - Each Player;
        All;
        Lúcio;
    }
    conditions {
        Is On Ground(Event Player) == False;
        Global.GameStart == True;
    }
    actions {
        Clear Status(Event Player, Burning);
        Clear Status((Event Player).Partner, Burning);
    }
}

rule ("Link partner health") {
    event {
        Player Took Damage;
        All;
        Bastion;
    }
    actions {
        Set Player Health((Event Player).Partner, Health(Event Player));
    }
}

rule ("Bastion allow shooting") {
    event {
        Ongoing - Each Player;
        All;
        Bastion;
    }
    conditions {
        Global.GameStart == True;
    }
    actions {
        Allow Button(Event Player, Button(Primary Fire));
    }
}

rule ("Lucio got a kill") {
    event {
        Player Earned Elimination;
        All;
        Lúcio;
    }
    conditions {
        Victim != Attacker;
    }
    actions {
        Modify Player Score((Event Player).Partner, 1);
    }
}

