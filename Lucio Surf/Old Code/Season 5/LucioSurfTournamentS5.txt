variables {
    global:
        0: PlayerFirst
        1: PlayerSecond
        2: PlayerThird
        3: PlayerFourth
        4: PlayerFith
        5: PlayerSixth
        6: PlayerSeventh
        7: PlayerEighth
        8: ForLoop
        9: SizeTarget
        17: HeightJumpPad
        18: SpeedSpeedRing
        19: PosJumpPad
        20: PosSpeedRing
        21: PosTarget
        22: PosExplanation
        23: PosStart
        24: PosCheckpoint
        25: PosFinish
        27: PosSpawn
        28: EndScreen
        29: PlayerArray
        30: TeamFirst
        31: TeamSecond
    player:
        0: TimeCurrent
        1: TimeBest
        2: NewBest
        3: Checkpoint
        4: Finished
        5: Target
        6: AutoReset
        7: HideHelp
        8: Mode
        9: Attempts
        10: Spawned
        11: ForLoop
        12: IndexCheckpoint
        13: IndexJumpPad
        14: IndexSpeedRing
        15: IndexTarget
        16: StatusCheckpoint
        17: StatusTarget
        18: StatusTargetPreHit
        19: TargetDifference
        20: Temp
        21: SettingRun
        22: TargetHitInUse
        23: PosPracticeCheckpoint
        24: FacingPracticeCheckpoint
        25: VelocityPracticeCheckpoint
        26: SpeedPracticeCheckpoint
}
subroutines {
    1: SpeedRing
    2: TargetHit1
    3: TargetHit2
    4: TargetHit3
    5: TargetHit4
    6: TeleportSpawn
}
disabled rule ("Debug (Player)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(Event Player, Custom String("Mode: {0}", (Event Player).Mode, Null, Null), Null, Null, Left, -10, White, White, White, String, Default Visibility);
        Create HUD Text(Event Player, Custom String("Checkpoints: {0}", Count Of(Global.PosCheckpoint), Null, Null), Null, Null, Left, -9, White, White, White, String, Default Visibility);
        Create HUD Text(Event Player, Custom String("Checkpoint: {0}", (Event Player).Checkpoint, Null, Null), Null, Null, Left, -8, White, White, White, String, Default Visibility);
    }
}

rule ("Speed Ring") {
    event {
        Subroutine;
        SpeedRing;
    }
    actions {
        If(Value In Array(Global.SpeedSpeedRing, True));
            Set Player Variable(Event Player, IndexSpeedRing, Index Of Array Value(Global.PosSpeedRing, Filtered Array(Global.PosSpeedRing, Compare(Distance Between(Current Array Element, Position Of(Event Player)), <, 3))));
            Apply Impulse(Event Player, Multiply(10, Velocity Of(Event Player)), Multiply(Value In Array(Global.SpeedSpeedRing, (Event Player).IndexSpeedRing), Horizontal Speed Of(Event Player)), To World, Cancel Contrary Motion);
            Set Move Speed(Event Player, Multiply(100, Value In Array(Global.SpeedSpeedRing, (Event Player).IndexSpeedRing)));
        Else;
            Apply Impulse(Event Player, Multiply(10, Velocity Of(Event Player)), Multiply(Global.SpeedSpeedRing, Horizontal Speed Of(Event Player)), To World, Cancel Contrary Motion);
            Set Move Speed(Event Player, Multiply(100, Global.SpeedSpeedRing));
        End;
        Wait(0.5, Ignore Condition);
        Set Move Speed(Event Player, 100);
    }
}

rule ("Player Hit Target (bullet 1)") {
    event {
        Subroutine;
        TargetHit1;
    }
    actions {
        Set Player Variable At Index(Event Player, Temp, False, (Event Player).IndexTarget);
        Wait(Multiply(0.02, Distance Between(Eye Position(Event Player), Value In Array(Global.PosTarget, First Of((Event Player).Temp)))), Ignore Condition);
        If(Not(Value In Array((Event Player).StatusTargetPreHit, First Of((Event Player).Temp))));
            Set Player Variable At Index(Event Player, TargetHitInUse, False, False);
            Abort;
        End;
        Set Player Variable At Index(Event Player, StatusTarget, First Of((Event Player).Temp), True);
        (Event Player).Target += 1;
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
        Small Message(Event Player, String("{0}: {1}", Custom String("{0} {1}", String("Targets", Null, Null, Null), String("Hit", Null, Null, Null), Null), Custom String("{0} / {1}", (Event Player).Target, Count Of(Global.PosTarget), Null), Null));
        Set Player Variable At Index(Event Player, TargetHitInUse, False, False);
    }
}

rule ("Player Hit Target (bullet 2)") {
    event {
        Subroutine;
        TargetHit2;
    }
    actions {
        Set Player Variable At Index(Event Player, Temp, True, (Event Player).IndexTarget);
        Wait(Multiply(0.02, Distance Between(Eye Position(Event Player), Value In Array(Global.PosTarget, Value In Array((Event Player).Temp, True)))), Ignore Condition);
        If(Not(Value In Array((Event Player).StatusTargetPreHit, Value In Array((Event Player).Temp, True))));
            Set Player Variable At Index(Event Player, TargetHitInUse, True, False);
            Abort;
        End;
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
        Set Player Variable At Index(Event Player, StatusTarget, Value In Array((Event Player).Temp, True), True);
        (Event Player).Target += 1;
        Small Message(Event Player, String("{0}: {1}", Custom String("{0} {1}", String("Targets", Null, Null, Null), String("Hit", Null, Null, Null), Null), Custom String("{0} / {1}", (Event Player).Target, Count Of(Global.PosTarget), Null), Null));
        Set Player Variable At Index(Event Player, TargetHitInUse, True, False);
    }
}

rule ("Player Hit Target (bullet 3)") {
    event {
        Subroutine;
        TargetHit3;
    }
    actions {
        Set Player Variable At Index(Event Player, Temp, 2, (Event Player).IndexTarget);
        Wait(Multiply(0.02, Distance Between(Eye Position(Event Player), Value In Array(Global.PosTarget, Value In Array((Event Player).Temp, 2)))), Ignore Condition);
        If(Not(Value In Array((Event Player).StatusTargetPreHit, Value In Array((Event Player).Temp, 2))));
            Set Player Variable At Index(Event Player, TargetHitInUse, 2, False);
            Abort;
        End;
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
        Set Player Variable At Index(Event Player, StatusTarget, Value In Array((Event Player).Temp, 2), True);
        (Event Player).Target += 1;
        Small Message(Event Player, String("{0}: {1}", Custom String("{0} {1}", String("Targets", Null, Null, Null), String("Hit", Null, Null, Null), Null), Custom String("{0} / {1}", (Event Player).Target, Count Of(Global.PosTarget), Null), Null));
        Set Player Variable At Index(Event Player, TargetHitInUse, 2, False);
    }
}

rule ("Player Hit Target (bullet 4)") {
    event {
        Subroutine;
        TargetHit4;
    }
    actions {
        Set Player Variable At Index(Event Player, Temp, 3, (Event Player).IndexTarget);
        Wait(Multiply(0.02, Distance Between(Eye Position(Event Player), Value In Array(Global.PosTarget, Value In Array((Event Player).Temp, 3)))), Ignore Condition);
        If(Not(Value In Array((Event Player).StatusTargetPreHit, Value In Array((Event Player).Temp, 3))));
            Set Player Variable At Index(Event Player, TargetHitInUse, 3, False);
            Abort;
        End;
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
        Set Player Variable At Index(Event Player, StatusTarget, Value In Array((Event Player).Temp, 3), True);
        (Event Player).Target += 1;
        Small Message(Event Player, String("{0}: {1}", Custom String("{0} {1}", String("Targets", Null, Null, Null), String("Hit", Null, Null, Null), Null), Custom String("{0} / {1}", (Event Player).Target, Count Of(Global.PosTarget), Null), Null));
        Set Player Variable At Index(Event Player, TargetHitInUse, 3, False);
    }
}

rule ("Teleport to Spawn (End of Heat)") {
    event {
        Subroutine;
        TeleportSpawn;
    }
    actions {
        Set Player Variable(Event Player, SettingRun, False);
        Set Player Variable(Event Player, Mode, Null);
        Stop Chasing Player Variable(Event Player, TimeCurrent);
        Set Player Variable(Event Player, TimeCurrent, Null);
        Set Invisible(Event Player, None);
        Set Status(Event Player, Null, Phased Out, 9999);
        Disallow Button(Event Player, Primary Fire);
        Teleport(Event Player, Global.PosSpawn);
    }
}

rule ("Start - Maps - Setup") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(HeightJumpPad, 18);
        Set Global Variable(SpeedSpeedRing, 1.2);
        Set Global Variable(SizeTarget, Array(0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75));
    }
}

rule ("Start - Assault - Every Map Is In Order (a - z)") {
    event {
        Ongoing - Global;
    }
    actions {
        If(Compare(Current Map, ==, Map(Paris)));
            Set Global Variable(PosJumpPad, Empty Array);
            Set Global Variable(SpeedSpeedRing, Array(1.4, 1.1, 1.15));
            Set Global Variable(PosSpeedRing, Array(Vector(-86.259, 17.101, -19.71), Vector(-89.094, 16.561, -104.79), Vector(-40.862, 17.201, -8.947)));
            Set Global Variable(PosTarget, Array(Vector(-42.919, 19.249, 4.78), Vector(-26.089, 19.249, -27.091), Vector(-96.885, 20.53, -30.404), Vector(-50.397, 20.53, -56.284), Vector(-94.579, 22.14, -81.971), Vector(-106.255, 16.716, -99.468)));
            Set Global Variable(PosStart, Vector(-27.132, 13.165, 6.412));
            Set Global Variable(PosCheckpoint, Array(Vector(7.458, 10.199, -58.2), Vector(-53.175, 12.201, 12.32), Vector(-73.074, 15.175, -86.629), Vector(-118.024, 13.175, -92.921), Vector(-83.325, 12.175, -58.477)));
            Set Global Variable(PosFinish, Vector(-58.73, 12.028, -13.232));
            Set Global Variable(PosSpawn, Vector(29.061, 16.164, -83.73));
            Abort;
        End;
        If(Compare(Current Map, ==, Map(Temple of Anubis)));
            Set Global Variable(PosJumpPad, Empty Array);
            Set Global Variable(PosSpeedRing, Array(Vector(-21.877, 9.137, 66.208)));
            Set Global Variable(PosTarget, Array(Vector(-27.283, 11.221, 46.704), Vector(-8.013, 8.178, 109.634), Vector(-4.317, 8.338, 4.733)));
            Set Global Variable(PosStart, Vector(-47.474, 9.684, 18.968));
            Set Global Variable(PosCheckpoint, Array(Vector(-30.065, 3.812, 107.13), Vector(17.017, 2.574, 97.256), Vector(17.407, 0.551, 1.138), Vector(-21.014, 4.684, 35.175), Vector(-20.446, -2.082, -22.555)));
            Set Global Variable(PosFinish, Vector(-34.967, 1.516, 35.235));
            Set Global Variable(PosSpawn, Vector(-11.155, 9.174, 148.457));
            Abort;
        End;
        If(Compare(Current Map, ==, Map(Volskaya Industries)));
            Set Global Variable(PosJumpPad, Array(Vector(-7.989, 18.014, 38.256)));
            Set Global Variable(SpeedSpeedRing, 1.4);
            Set Global Variable(PosSpeedRing, Array(Vector(-49.071, -0.524, 76.893), Vector(-48.03, -0.885, 64.626)));
            Set Global Variable(PosTarget, Array(Vector(-11.959, 5.859, 77.69), Vector(-93.577, 4.898, 49.575), Vector(-47.418, 3.456, 72.482), Vector(-9.568, -0.724, 49.063)));
            Set Global Variable(PosStart, Vector(-43.782, -2.805, 52.785));
            Set Global Variable(PosCheckpoint, Array(Vector(-98.926, -2.305, 23.314), Vector(-104.674, -3.805, 68.186), Vector(-32.689, -3.308, 72.356), Vector(27.113, -3.871, 77.489), Vector(-29.813, 2.185, 38.063)));
            Set Global Variable(PosFinish, Vector(-56.662, -3.986, 71.855));
            Set Global Variable(PosSpawn, Vector(29.14, 0.781, -11.31));
    }
}

rule ("Start - Hybrid") {
    event {
        Ongoing - Global;
    }
    actions {
        If(Compare(Current Map, ==, Map(King's Row)));
            Set Global Variable(PosJumpPad, Array(Vector(-151.962, -1.679, 20.489)));
            Set Global Variable(PosSpeedRing, Array(Vector(-84.567, 1.748, -24.01)));
            Set Global Variable(PosTarget, Array(Vector(4.228, 12.199, -43.217), Vector(-133.06, 0.246, 10.817), Vector(-16.876, 1.175, -16.765)));
            Set Global Variable(PosStart, Vector(-56.613, -0.1, -42.469));
            Set Global Variable(PosCheckpoint, Array(Vector(-154.342, -2.983, 24.929), Vector(-80.861, 0.314, 2.81), Vector(5.901, 6.285, -28.012), Vector(-25.228, 0.061, 15.6)));
            Set Global Variable(PosFinish, Vector(-77.907, 0.294, -22.495));
            Set Global Variable(PosSpawn, Vector(0.359, 5.356, 39.519));
            Abort;
        End;
        If(Compare(Current Map, ==, Map(Numbani)));
            Set Global Variable(PosJumpPad, Empty Array);
            Set Global Variable(PosSpeedRing, Empty Array);
            Set Global Variable(PosTarget, Array(Vector(27.218, 7.828, 19.343), Vector(87.045, 7.828, -2.748), Vector(157.917, 7.956, -11.199), Vector(123.86, 4.698, 18.46), Vector(207.032, 2.616, 22.724)));
            Set Global Variable(PosStart, Vector(155.325, -3.575, 23.509));
            Set Global Variable(PosCheckpoint, Array(Vector(219.739, 0.367, 22.441), Vector(205.1, -3.626, -5.822), Vector(120.67, -5.59, -17.039), Vector(131.903, -3.575, 40.896), Vector(59.889, -0.75, -25.254), Vector(8.506, 0.425, 37.804)));
            Set Global Variable(PosFinish, Vector(139.784, -4.005, 17.222));
            Set Global Variable(PosSpawn, Vector(-34.72, 6.789, 6.122));
    }
}

rule ("Start Escort") {
    event {
        Ongoing - Global;
    }
    actions {
        If(Compare(Current Map, ==, Map(Dorado)));
            Set Global Variable(PosJumpPad, Array(Vector(25.379, 3.68, -9.698)));
            Set Global Variable(PosSpeedRing, Array(Vector(63.088, 21.316, 41.735)));
            Set Global Variable(PosTarget, Array(Vector(32.48, 6.077, -6.712), Vector(109.978, 20.231, 13.867), Vector(155.323, 18.932, 56.909), Vector(60.479, 16.748, -22.246)));
            Set Global Variable(PosStart, Vector(138.184, 11.187, 16.06));
            Set Global Variable(PosCheckpoint, Array(Vector(174.171, 11.175, 37.596), Vector(127.679, 12.187, 52.141), Vector(35.461, 10.175, -33.067), Vector(110.839, 10.175, 1.102), Vector(3.741, -0.2, -7.493)));
            Set Global Variable(PosFinish, Vector(107.157, 18.175, -3.186));
            Abort;
        End;
        If(Compare(Current Map, ==, Map(Watchpoint: Gibraltar)));
            Set Global Variable(HeightJumpPad, 14);
            Set Global Variable(SpeedSpeedRing, 1.3);
            Set Global Variable(PosJumpPad, Array(Vector(66.019, -2.964, -34.936)));
            Set Global Variable(PosSpeedRing, Array(Vector(24.004, 5.261, -76.554), Vector(32.249, -7.552, -103.262)));
            Set Global Variable(PosTarget, Array(Vector(41.547, 6.062, -127.541), Vector(14.44, 4.971, -84.559), Vector(37.323, 4.01, -61.927), Vector(59.167, 5.611, 15.744), Vector(84.51, 10.416, 8.546)));
            Set Global Variable(PosStart, Vector(41.299, -4.837, -47.009));
            Set Global Variable(PosCheckpoint, Array(Vector(82.004, -0.3, 39.69), Vector(88.537, 3.175, -26.408), Vector(28.308, -5.595, -158.458), Vector(66.1, -1.825, -114.92)));
            Set Global Variable(PosFinish, Vector(60.147, 10.201, -38.682));
            Set Global Variable(PosSpawn, Vector(77.748, -5.721, 44.734));
    }
}

rule ("Start - Global") {
    event {
        Ongoing - Global;
    }
    actions {
        "Targets / JumpPad / SpeedRing / Start / Checkpoint / Finish effects"
        Skip(Subtract(20, Multiply(Count Of(Global.PosTarget), 2)));
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 9))), Sphere, Red, Value In Array(Global.PosTarget, 9), Value In Array(Global.SizeTarget, 9), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 9)), Sphere, Green, Value In Array(Global.PosTarget, 9), Value In Array(Global.SizeTarget, 9), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 8))), Sphere, Red, Value In Array(Global.PosTarget, 8), Value In Array(Global.SizeTarget, 8), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 8)), Sphere, Green, Value In Array(Global.PosTarget, 8), Value In Array(Global.SizeTarget, 8), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 7))), Sphere, Red, Value In Array(Global.PosTarget, 7), Value In Array(Global.SizeTarget, 7), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 7)), Sphere, Green, Value In Array(Global.PosTarget, 7), Value In Array(Global.SizeTarget, 7), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 6))), Sphere, Red, Value In Array(Global.PosTarget, 6), Value In Array(Global.SizeTarget, 6), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 6)), Sphere, Green, Value In Array(Global.PosTarget, 6), Value In Array(Global.SizeTarget, 6), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 5))), Sphere, Red, Value In Array(Global.PosTarget, 5), Value In Array(Global.SizeTarget, 5), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 5)), Sphere, Green, Value In Array(Global.PosTarget, 5), Value In Array(Global.SizeTarget, 5), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 4))), Sphere, Red, Value In Array(Global.PosTarget, 4), Value In Array(Global.SizeTarget, 4), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 4)), Sphere, Green, Value In Array(Global.PosTarget, 4), Value In Array(Global.SizeTarget, 4), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 3))), Sphere, Red, Value In Array(Global.PosTarget, 3), Value In Array(Global.SizeTarget, 3), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 3)), Sphere, Green, Value In Array(Global.PosTarget, 3), Value In Array(Global.SizeTarget, 3), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, 2))), Sphere, Red, Value In Array(Global.PosTarget, 2), Value In Array(Global.SizeTarget, 2), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, 2)), Sphere, Green, Value In Array(Global.PosTarget, 2), Value In Array(Global.SizeTarget, 2), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(Value In Array((Current Array Element).StatusTarget, True))), Sphere, Red, Value In Array(Global.PosTarget, True), Value In Array(Global.SizeTarget, True), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Value In Array((Current Array Element).StatusTarget, True)), Sphere, Green, Value In Array(Global.PosTarget, True), Value In Array(Global.SizeTarget, True), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), Not(First Of((Current Array Element).StatusTarget))), Sphere, Red, First Of(Global.PosTarget), First Of(Global.SizeTarget), Visible To);
        Create Effect(Filtered Array(All Players(All Teams), First Of((Current Array Element).StatusTarget)), Sphere, Green, First Of(Global.PosTarget), First Of(Global.SizeTarget), Visible To);
        For Global Variable(ForLoop, False, Count Of(Global.PosJumpPad), True);
            Create Effect(All Players(All Teams), Ring, Blue, Value In Array(Global.PosJumpPad, Global.ForLoop), 3, Visible To);
        End;
        For Global Variable(ForLoop, False, Count Of(Global.PosSpeedRing), True);
            Create Effect(All Players(All Teams), Good Aura, Green, Value In Array(Global.PosSpeedRing, Global.ForLoop), 3, Visible To);
        End;
        Create Effect(All Players(All Teams), Ring, Green, Global.PosStart, 2, Visible To);
        Create Effect(All Players(All Teams), Light Shaft, White, Global.PosFinish, 5, Visible To);
        Create Effect(All Players(All Teams), Ring, White, Global.PosFinish, 5, Visible To);
        Create Icon(All Players(All Teams), Add(Global.PosFinish, Vector(False, 6, False)), Flag, Visible To, White, True);
        For Global Variable(ForLoop, False, Count Of(Global.PosCheckpoint), True);
            Create Effect(All Players(All Teams), Light Shaft, Sky Blue, Value In Array(Global.PosCheckpoint, Global.ForLoop), 3.5, Visible To);
            Create Effect(All Players(All Teams), Ring, Sky Blue, Value In Array(Global.PosCheckpoint, Global.ForLoop), 3.5, Visible To);
            Create Icon(All Players(All Teams), Add(Value In Array(Global.PosCheckpoint, Global.ForLoop), Vector(False, 6, False)), Arrow: Down, Visible To, Sky Blue, True);
        End;
        "Vars"
        Set Global Variable(PlayerArray, Array(Global.PlayerFirst, Global.PlayerSecond, Global.PlayerThird, Global.PlayerFourth, Global.PlayerFith, Global.PlayerSixth, Global.PlayerSeventh, Global.PlayerEighth));
        Set Match Time(1820);
        "Leaderboards"
        Create HUD Text(All Players(All Teams), Team 1, Null, Null, Right, False, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)))), True), First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1))), If-Then-Else((First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)))).TimeBest, (First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)))).TimeBest, 9999)), Right, True, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), True)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), True), If-Then-Else((Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), True)).TimeBest, (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), True)).TimeBest, 9999)), Right, 2, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 2)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 2), If-Then-Else((Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 2)).TimeBest, (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 2)).TimeBest, 9999)), Right, 3, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 3)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 3), If-Then-Else((Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 3)).TimeBest, (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 1)), 3)).TimeBest, 9999)), Right, 4, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Custom String("{0}", Team 2, Null, Null), Null, Null, Right, 5, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)))), True), First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2))), If-Then-Else((First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)))).TimeBest, (First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)))).TimeBest, 9999)), Right, 6, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), True)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), True), If-Then-Else((Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), True)).TimeBest, (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), True)).TimeBest, 9999)), Right, 7, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 2)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 2), If-Then-Else((Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 2)).TimeBest, (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 2)).TimeBest, 9999)), Right, 8, White, White, White, Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, String("{0} - {1} - {2}", Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 3)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 3), If-Then-Else((Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 3)).TimeBest, (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Team 2)), 3)).TimeBest, 9999)), Right, 9, White, White, White, Visible To and String, Visible Always);
    }
}

rule ("Start - Player") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, TimeBest, 9999);
        Set Player Variable(Event Player, Finished, False);
        Set Player Variable(Event Player, Checkpoint, Null);
        Set Player Variable(Event Player, Target, Null);
        Set Player Variable(Event Player, StatusCheckpoint, Empty Array);
        Set Player Variable(Event Player, Temp, Array(Null, Null, Null, Null));
        Set Player Variable(Event Player, TargetHitInUse, Array(False, False, False, False));
        For Player Variable(Event Player, ForLoop, False, Count Of(Global.PosCheckpoint), True);
            Modify Player Variable(Event Player, StatusCheckpoint, Append To Array, False);
        End;
        Set Player Variable(Event Player, StatusTarget, Empty Array);
        For Player Variable(Event Player, ForLoop, False, Count Of(Global.PosTarget), True);
            Modify Player Variable(Event Player, StatusTarget, Append To Array, False);
        End;
        Set Player Variable(Event Player, Attempts, -1);
        Disallow Button(Event Player, Ability 1);
        Disallow Button(Event Player, Ability 2);
        Disallow Button(Event Player, Ultimate);
        Set Status(Event Player, Null, Phased Out, 9999);
        Create HUD Text(Event Player, Null, Null, Custom String("{0}\n{1}", String("{0}: {1}", String("Checkpoints", Null, Null, Null), Custom String("{0} / {1}", (Event Player).Checkpoint, Count Of(Global.PosCheckpoint), Null), Null), String("{0}: {1}", String("Targets", Null, Null, Null), Custom String("{0} / {1}", (Event Player).Target, Count Of(Global.PosTarget), Null), Null), Null), Top, 4, White, White, Blue, String, Default Visibility);
        Create HUD Text(Event Player, Event Player, Null, Null, Left, False, Yellow, White, White, None, Default Visibility);
        Create HUD Text(Event Player, String("{0} sec", (Event Player).TimeCurrent, Null, Null), Null, Null, Top, 2, White, White, White, String, Default Visibility);
        Create HUD Text(Event Player, String("{0}: {1}", String("Best", Null, Null, Null), String("{0} sec", (Event Player).TimeBest, Null, Null), Null), Null, Null, Left, True, White, White, White, String, Default Visibility);
        Create HUD Text(Event Player, String("{0}: {1}", String("Attempts", Null, Null, Null), (Event Player).Attempts, Null), Null, Null, Left, 2, White, White, White, String, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Global.PosFinish, Event Player), Null, Null), Add(Global.PosFinish, Vector(False, 5, False)), 2, Do Not Clip, String, White, Default Visibility);
        Skip(Subtract(10, Count Of(Global.PosCheckpoint)));
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 9), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 9), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 8), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 8), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 7), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 7), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 6), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 6), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 5), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 5), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 4), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 4), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 3), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 3), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, 2), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, 2), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(Value In Array(Global.PosCheckpoint, True), Event Player), Null, Null), Add(Value In Array(Global.PosCheckpoint, True), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Create In-World Text(Event Player, String("{0} m", Distance Between(First Of(Global.PosCheckpoint), Event Player), Null, Null), Add(First Of(Global.PosCheckpoint), Vector(False, 5, False)), 2, Do Not Clip, String, Sky Blue, Default Visibility);
        Wait(0.016, Ignore Condition);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player), Null, Null), Null, Null, Top, True, Red, White, White, String, Default Visibility);
        Set Player Variable(Event Player, Mode, Null);
        Set Player Variable(Event Player, SettingRun, True);
        Kill(Event Player, Null);
    }
}

rule ("Start timer") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 0;
        (Event Player).SettingRun != False;
        (Event Player).Checkpoint == False;
        Is True For All((Event Player).StatusTargetPreHit, Compare(Current Array Element, ==, False)) == True;
        Or(Compare(Distance Between(Global.PosStart, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosStart), Z Component Of(Position Of(Event Player)))), >, 2), And(Compare(Distance Between(Global.PosStart, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosStart), Z Component Of(Position Of(Event Player)))), <, 2), Not(Is On Ground(Event Player)))) == True;
    }
    actions {
        Chase Player Variable At Rate(Event Player, TimeCurrent, 5000, True, None);
        Allow Button(Event Player, Primary Fire);
        Set Invisible(Event Player, None);
    }
}

rule ("Checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Finished == False;
        (Event Player).Mode == 0;
        Is True For Any(Global.PosCheckpoint, And(And(Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 3.5), Is In Line of Sight(Position Of(Event Player), Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player))), Barriers Do Not Block LOS)), Compare(Y Component Of(Eye Position(Event Player)), >=, Y Component Of(Current Array Element)))) == True;
        (Event Player).TimeCurrent > 1;
    }
    actions {
        "Get Index to check for other conditions"
        Set Player Variable(Event Player, IndexCheckpoint, Index Of Array Value(Global.PosCheckpoint, Filtered Array(Global.PosCheckpoint, Compare(Distance Between(Current Array Element, Vector(X Component Of(Eye Position(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 3.5))));
        "Check extra conditions"
        If(Value In Array((Event Player).StatusCheckpoint, (Event Player).IndexCheckpoint));
            Small Message(Event Player, Custom String("Checkpoint already collected", Null, Null, Null));
            Abort;
        End;
        (Event Player).Checkpoint += 1;
        Set Player Variable At Index(Event Player, StatusCheckpoint, (Event Player).IndexCheckpoint, True);
        Play Effect(Event Player, Debuff Impact Sound, White, Position Of(Event Player), 200);
        Big Message(Event Player, (Event Player).TimeCurrent);
        If(Compare((Event Player).Checkpoint, ==, Count Of(Global.PosCheckpoint)));
            Small Message(Event Player, Custom String("{0} {1}", String("Finish", Null, Null, Null), String("Unlocked", Null, Null, Null), Null));
            Abort;
        End;
        Small Message(Event Player, Custom String("{0} {1}", String("Checkpoints", Null, Null, Null), Custom String("{0} / {1}", (Event Player).Checkpoint, Count Of(Global.PosCheckpoint), Null), Null));
    }
}

rule ("Checkpoint (no LoS)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Finished == False;
        (Event Player).Mode == 0;
        Is True For Any(Global.PosCheckpoint, And(Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 3.5), Or(Not(Is In Line of Sight(Position Of(Event Player), Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player))), Barriers Do Not Block LOS)), Compare(Y Component Of(Eye Position(Event Player)), <, Y Component Of(Current Array Element))))) == True;
    }
    actions {
        Small Message(Event Player, Custom String("{0} {1}", String("Checkpoint", Null, Null, Null), String("Out of View", Null, Null, Null), Null));
    }
}

rule ("Finish") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Checkpoint == Count Of(Global.PosCheckpoint);
        (Event Player).Finished == False;
        (Event Player).Mode == 0;
        Distance Between(Global.PosFinish, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player)))) <= 5;
        Is In Line of Sight(Position Of(Event Player), Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player))), Barriers Do Not Block LOS) == True;
        Y Component Of(Eye Position(Event Player)) >= Y Component Of(Global.PosFinish);
    }
    actions {
        Stop Chasing Player Variable(Event Player, TimeCurrent);
        Abort If(Compare((Event Player).TimeCurrent, <=, True));
        If(Subtract(Count Of(Global.PosTarget), (Event Player).Target));
            (Event Player).TimeCurrent += Divide(Subtract(Count Of(Global.PosTarget), (Event Player).Target), 2);
            Small Message(Event Player, Custom String("Missed {0} Targets - Added {1} secs to your time.", Subtract(Count Of(Global.PosTarget), (Event Player).Target), Divide(Subtract(Count Of(Global.PosTarget), (Event Player).Target), 2), Null));
        End;
        (Event Player).Attempts += 1;
        "Check if new Personal Best is achieved"
        If(Compare((Event Player).TimeCurrent, <, (Event Player).TimeBest));
            Set Player Variable(Event Player, TimeBest, (Event Player).TimeCurrent);
            Set Player Variable(Event Player, NewBest, True);
            "Order new places"
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerEighth).TimeBest), Not(Global.PlayerEighth)), Is True For All(Array Slice(Global.PlayerArray, False, 7), Compare(Event Player, !=, Current Array Element))));
                Set Global Variable(PlayerEighth, Event Player);
            End;
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerSeventh).TimeBest), Not(Global.PlayerSeventh)), Is True For All(Array Slice(Global.PlayerArray, False, 6), Compare(Event Player, !=, Current Array Element))));
                If(Compare(Event Player, !=, Global.PlayerSeventh));
                    Set Global Variable(PlayerEighth, Global.PlayerSeventh);
                End;
                Set Global Variable(PlayerSeventh, Event Player);
            End;
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerSixth).TimeBest), Not(Global.PlayerSixth)), Is True For All(Array Slice(Global.PlayerArray, False, 5), Compare(Event Player, !=, Current Array Element))));
                If(Compare(Event Player, !=, Global.PlayerSixth));
                    Set Global Variable(PlayerSeventh, Global.PlayerSixth);
                End;
                Set Global Variable(PlayerSixth, Event Player);
            End;
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerFith).TimeBest), Not(Global.PlayerFith)), Is True For All(Array Slice(Global.PlayerArray, False, 4), Compare(Event Player, !=, Current Array Element))));
                If(Compare(Event Player, !=, Global.PlayerFith));
                    Set Global Variable(PlayerSixth, Global.PlayerFith);
                End;
                Set Global Variable(PlayerFith, Event Player);
            End;
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerFourth).TimeBest), Not(Global.PlayerFourth)), Is True For All(Array Slice(Global.PlayerArray, False, 3), Compare(Event Player, !=, Current Array Element))));
                If(Compare(Event Player, !=, Global.PlayerFourth));
                    Set Global Variable(PlayerFith, Global.PlayerFourth);
                End;
                Set Global Variable(PlayerFourth, Event Player);
            End;
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerThird).TimeBest), Not(Global.PlayerThird)), Is True For All(Array Slice(Global.PlayerArray, False, 2), Compare(Event Player, !=, Current Array Element))));
                If(Compare(Event Player, !=, Global.PlayerThird));
                    Set Global Variable(PlayerFourth, Global.PlayerThird);
                End;
                Set Global Variable(PlayerThird, Event Player);
            End;
            If(And(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerSecond).TimeBest), Not(Global.PlayerSecond)), Is True For All(Array Slice(Global.PlayerArray, False, True), Compare(Event Player, !=, Current Array Element))));
                If(Compare(Event Player, !=, Global.PlayerSecond));
                    Set Global Variable(PlayerThird, Global.PlayerSecond);
                End;
                Set Global Variable(PlayerSecond, Event Player);
            End;
            If(Or(Compare((Event Player).TimeCurrent, <, (Global.PlayerFirst).TimeBest), Not(Global.PlayerFirst)));
                If(Compare(Event Player, !=, Global.PlayerFirst));
                    Set Global Variable(PlayerSecond, Global.PlayerFirst);
                End;
                Set Global Variable(PlayerFirst, Event Player);
            End;
        Else;
            Big Message(Event Player, String("{0}!!!", String("Finished", Null, Null, Null), Null, Null));
        End;
        Wait(0.016, Ignore Condition);
        Set Global Variable(PlayerArray, Array(Global.PlayerFirst, Global.PlayerSecond, Global.PlayerThird, Global.PlayerFourth, Global.PlayerFith, Global.PlayerSixth, Global.PlayerSeventh, Global.PlayerEighth));
        Set Player Variable(Event Player, Finished, True);
    }
}

rule ("Finish (no LoS)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Finished == False;
        (Event Player).Mode == 0;
        Distance Between(Global.PosFinish, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player)))) <= 5;
        Or(Not(Is In Line of Sight(Position Of(Event Player), Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player))), Barriers Do Not Block LOS)), Compare(Y Component Of(Eye Position(Event Player)), <, Y Component Of(Global.PosFinish))) == True;
        (Event Player).TimeCurrent > 1;
    }
    actions {
        Small Message(Event Player, Custom String("{0} {1}", String("Finish", Null, Null, Null), String("Out of View", Null, Null, Null), Null));
    }
}

rule ("Finish (no Checkpoint)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Checkpoint != Count Of(Global.PosCheckpoint);
        (Event Player).Finished == False;
        (Event Player).Mode == 0;
        Distance Between(Global.PosFinish, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player)))) <= 5;
        (Event Player).TimeCurrent > 1;
    }
    actions {
        Big Message(Event Player, Custom String("{0} {1}", String("No", Null, Null, Null), String("Checkpoint", Null, Null, Null), Null));
    }
}

rule ("Finish Message (Best Time)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Finished != False;
        (Event Player).NewBest == True;
        Event Player != Global.PlayerFirst;
    }
    actions {
        Big Message(Event Player, Custom String("{0} - {1}", Custom String("{0} {1}", String("Best", Null, Null, Null), String("Time", Null, Null, Null), Null), (Event Player).TimeBest, Null));
    }
}

rule ("Finish Message (Record Time)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Finished != False;
        (Event Player).NewBest == True;
        Event Player == Global.PlayerFirst;
    }
    actions {
        Big Message(All Players(All Teams), String("{0}: {1}", String("New Record", Null, Null, Null), Custom String("{0} - {1}", String("{0} sec", (Event Player).TimeBest, Null, Null), String("{0}!!!", Event Player, Null, Null), Null), Null));
    }
}

rule ("Jump Pads") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode >= 0;
        (Event Player).Mode <= 3;
        Is True For Any(Global.PosJumpPad, And(And(Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 3), Compare(Subtract(Y Component Of(Position Of(Event Player)), Y Component Of(Current Array Element)), <, False)), Compare(Y Component Of(Position Of(Event Player)), >, Subtract(Y Component Of(Current Array Element), 0.2)))) == True;
    }
    actions {
        Set Player Variable(Event Player, IndexJumpPad, Index Of Array Value(Global.PosJumpPad, Filtered Array(Global.PosJumpPad, And(And(Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 3), Compare(Subtract(Y Component Of(Position Of(Event Player)), Y Component Of(Current Array Element)), <, False)), Compare(Y Component Of(Position Of(Event Player)), >, Subtract(Y Component Of(Current Array Element), 0.2))))));
        Abort If(Compare((Event Player).IndexJumpPad, ==, -1));
        If(Value In Array(Global.HeightJumpPad, True));
            Apply Impulse(Event Player, Up, Value In Array(Global.HeightJumpPad, (Event Player).IndexJumpPad), To World, Cancel Contrary Motion);
            Abort;
        End;
        Apply Impulse(Event Player, Up, Global.HeightJumpPad, To World, Cancel Contrary Motion);
    }
}

rule ("Speed Rings") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode >= 0;
        (Event Player).Mode <= 3;
        Is True For Any(Global.PosSpeedRing, Compare(Distance Between(Current Array Element, Position Of(Event Player)), <, 3)) == True;
    }
    actions {
        Start Rule(SpeedRing, Restart Rule);
    }
}

rule ("Targets") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Firing Primary(Event Player) == True;
        (Event Player).Mode >= 0;
        (Event Player).Mode <= 3;
    }
    actions {
        For Player Variable(Event Player, ForLoop, False, 4, True);
            Set Player Variable(Event Player, IndexTarget, Index Of Array Value(Global.PosTarget, Sorted Array(Filtered Array(Global.PosTarget, And(Compare(Distance Between(Current Array Element, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), Distance Between(Eye Position(Event Player), Current Array Element))), Null, Event Player, False)), <=, Global.SizeTarget), Not(Value In Array((Event Player).StatusTargetPreHit, Index Of Array Value(Global.PosTarget, Current Array Element))))), Distance Between(Eye Position(Event Player), Current Array Element))));
            If(Or(Compare((Event Player).IndexTarget, ==, -1), Compare(Distance Between(Value In Array(Global.PosTarget, (Event Player).IndexTarget), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), Distance Between(Eye Position(Event Player), Value In Array(Global.PosTarget, (Event Player).IndexTarget)))), Null, Event Player, False)), >, 2)));
                Wait(0.125, Abort When False);
                Continue;
            End;
            Set Player Variable At Index(Event Player, StatusTargetPreHit, (Event Player).IndexTarget, True);
            If(Not(First Of((Event Player).TargetHitInUse)));
                Set Player Variable At Index(Event Player, TargetHitInUse, False, True);
                Start Rule(TargetHit1, Do Nothing);
            Else If(Not(Value In Array((Event Player).TargetHitInUse, True)));
                Set Player Variable At Index(Event Player, TargetHitInUse, True, True);
                Start Rule(TargetHit2, Do Nothing);
            Else If(Not(Value In Array((Event Player).TargetHitInUse, 2)));
                Set Player Variable At Index(Event Player, TargetHitInUse, 2, True);
                Start Rule(TargetHit3, Do Nothing);
            Else If(Not(Value In Array((Event Player).TargetHitInUse, 3)));
                Set Player Variable At Index(Event Player, TargetHitInUse, 3, True);
                Start Rule(TargetHit4, Do Nothing);
            Else;
                Set Player Variable At Index(Event Player, TargetHitInUse, False, True);
                Start Rule(TargetHit1, Restart Rule);
                For Player Variable(Event Player, ForLoop, False, Count Of(Global.PosTarget), True);
                    If(And(Value In Array((Event Player).StatusTargetPreHit, (Event Player).ForLoop), Not(Value In Array((Event Player).StatusTarget, (Event Player).ForLoop))));
                        Set Player Variable At Index(Event Player, StatusTarget, (Event Player).ForLoop, True);
                        (Event Player).Target += 1;
                        (Event Player).TargetDifference += 1;
                    End;
                End;
                If((Event Player).TargetDifference);
                    Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
                    Small Message(Event Player, String("{0}: {1}", Custom String("{0} {1}", String("Targets", Null, Null, Null), String("Hit", Null, Null, Null), Null), Custom String("{0} / {1}", (Event Player).Target, Count Of(Global.PosTarget), Null), Null));
                    Set Player Variable(Event Player, TargetDifference, Null);
                End;
            End;
            Wait(0.125, Abort When False);
        End;
    }
}

rule ("Floor") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is On Ground(Event Player) == True;
        (Event Player).Mode == 0;
        (Event Player).SettingRun != False;
        Distance Between(Global.PosStart, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosStart), Z Component Of(Position Of(Event Player)))) > 2;
        Distance Between(Global.PosFinish, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player)))) > 5;
        Is True For All(Global.PosCheckpoint, Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), >, 3.5)) == True;
        Is True For All(Global.PosJumpPad, Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), >, 3)) == True;
    }
    actions {
        Kill(Event Player, Null);
    }
}

rule ("Ult Reset") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Ultimate) == True;
        (Event Player).Mode == 0;
        (Event Player).SettingRun != False;
        Distance Between(Global.PosStart, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosStart), Z Component Of(Position Of(Event Player)))) > 2;
    }
    actions {
        Kill(Event Player, Null);
    }
}

rule ("Velocity Counter (red)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Horizontal Speed Of(Event Player) <= 8.6;
        (Event Player).SettingRun != False;
    }
    actions {
        Destroy HUD Text(Last Text ID);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player), Null, Null), Null, Null, Top, 2, Red, White, White, String, Default Visibility);
    }
}

rule ("Velocity Counter (Orange)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Horizontal Speed Of(Event Player) > 8.6;
        Horizontal Speed Of(Event Player) < 13.15;
        (Event Player).SettingRun != False;
    }
    actions {
        Destroy HUD Text(Last Text ID);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player), Null, Null), Null, Null, Top, 2, Orange, White, White, String, Default Visibility);
    }
}

rule ("Velocity Counter (Yellow)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Horizontal Speed Of(Event Player) >= 13.15;
        Horizontal Speed Of(Event Player) < 17.2;
        (Event Player).SettingRun != False;
    }
    actions {
        Destroy HUD Text(Last Text ID);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player), Null, Null), Null, Null, Top, 2, Yellow, White, White, String, Default Visibility);
    }
}

rule ("Velocity Counter (Green)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Horizontal Speed Of(Event Player) >= 17.2;
        (Event Player).SettingRun != False;
    }
    actions {
        Destroy HUD Text(Last Text ID);
        Create HUD Text(Event Player, String("{0} m/s", Horizontal Speed Of(Event Player), Null, Null), Null, Null, Top, 2, Green, White, White, String, Default Visibility);
    }
}

rule ("Cycle Auto Reset") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 0;
        Is Button Held(Event Player, Secondary Fire) == True;
    }
    actions {
        (Event Player).AutoReset += 1;
        If(Compare((Event Player).AutoReset, ==, 3));
            Set Player Variable(Event Player, AutoReset, Null);
        End;
        If(Compare((Event Player).AutoReset, ==, Null));
            Small Message(Event Player, Custom String("Auto Reset - Disabled", Null, Null, Null));
            Abort;
        End;
        If(Compare((Event Player).AutoReset, ==, 1));
            Small Message(Event Player, Custom String("Auto Reset - Personal Best", Null, Null, Null));
            Abort;
        End;
        If(Compare((Event Player).AutoReset, ==, 2));
            Small Message(Event Player, Custom String("Auto Reset - Record", Null, Null, Null));
    }
}

rule ("Auto Reset (Personal Best)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 0;
        (Event Player).AutoReset == 1;
        (Event Player).TimeCurrent > (Event Player).TimeBest;
    }
    actions {
        Small Message(Event Player, Custom String("Reset by 'Auto Reset'", Null, Null, Null));
        If(Global.EndScreen);
            Call Subroutine(TeleportSpawn);
            Abort;
        End;
        Kill(Event Player, Null);
    }
}

rule ("Auto Reset (Record)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 0;
        (Event Player).AutoReset == 2;
        Global.PlayerFirst != False;
        (Event Player).TimeCurrent > (Global.PlayerFirst).TimeBest;
    }
    actions {
        Small Message(Event Player, Custom String("Reset by 'Auto Reset'", Null, Null, Null));
        If(Global.EndScreen);
            Call Subroutine(TeleportSpawn);
            Abort;
        End;
        Kill(Event Player, Null);
    }
}

rule ("Practice Mode (Enabled)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 0;
        (Event Player).SettingRun != False;
        Is Button Held(Event Player, Interact) == True;
    }
    actions {
        Stop Chasing Player Variable(Event Player, TimeCurrent);
        Set Player Variable(Event Player, TimeCurrent, Null);
        Set Player Variable(Event Player, Attempts, Null);
        Set Player Variable(Event Player, Mode, 1);
        Create Icon(Event Player, (Event Player).PosPracticeCheckpoint, Flag, Position, Green, True);
        Big Message(Event Player, Custom String("Entering Practice Mode", Null, Null, Null));
        Set Invisible(Event Player, All);
        Clear Status(Event Player, Phased Out);
        Set Status(Event Player, Null, Phased Out, 9999);
    }
}

rule ("Practice Mode (Button Held - Enabled)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 1;
        Is Button Held(Event Player, Interact) == False;
    }
    actions {
        Set Player Variable(Event Player, Mode, 2);
    }
}

rule ("Fire status (Enabled)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode >= 1;
        (Event Player).Mode <= 3;
    }
    actions {
        Set Status(Event Player, Null, Burning, 9999);
        Set Status(Event Player, Null, Invincible, 9999);
    }
}

rule ("Practice Mode (disabled)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 2;
        Is Button Held(Event Player, Interact) == True;
    }
    actions {
        Set Player Variable(Event Player, Mode, 3);
    }
}

rule ("Practice Mode (Button Held - disabled)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 3;
        Is Button Held(Event Player, Interact) == False;
    }
    actions {
        Destroy Icon(Last Created Entity);
        Set Player Variable(Event Player, PosPracticeCheckpoint, Null);
        Big Message(Event Player, Custom String("Leaving Practice Mode", Null, Null, Null));
        Set Player Variable(Event Player, Attempts, -1);
        Set Player Variable(Event Player, Mode, Null);
        If(Or(Or(Or(Or(Not(Is On Ground(Event Player)), Compare(Distance Between(Global.PosStart, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosStart), Z Component Of(Position Of(Event Player)))), <=, 2)), Compare(Distance Between(Global.PosFinish, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosFinish), Z Component Of(Position Of(Event Player)))), <=, 5)), Is True For Any(Global.PosCheckpoint, Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 3.5))), Is True For Any(Global.PosJumpPad, Compare(Distance Between(Current Array Element, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Current Array Element), Z Component Of(Position Of(Event Player)))), <=, 2))));
            Kill(Event Player, Null);
    }
}

rule ("Fire status (Disabled)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode != 1;
        (Event Player).Mode != 2;
        (Event Player).Mode != 3;
    }
    actions {
        Clear Status(Event Player, Burning);
        Clear Status(Event Player, Invincible);
    }
}

rule ("Practice Checkpoints") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 2;
        Is Button Held(Event Player, Secondary Fire) == True;
    }
    actions {
        Set Player Variable(Event Player, PosPracticeCheckpoint, Position Of(Event Player));
        Set Player Variable(Event Player, FacingPracticeCheckpoint, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, VelocityPracticeCheckpoint, Velocity Of(Event Player));
        Set Player Variable(Event Player, SpeedPracticeCheckpoint, Speed Of(Event Player));
        Small Message(Event Player, Custom String("{0} {1}", String("Checkpoint", Null, Null, Null), String("Saved", Null, Null, Null), Null));
    }
}

rule ("Ult Reset Checkpoint") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mode == 2;
        (Event Player).SettingRun != False;
        Is Button Held(Event Player, Ultimate) == True;
    }
    actions {
        Kill(Event Player, Null);
        (Event Player).Attempts += 1;
    }
}

rule ("Circle Fix") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Distance Between(Global.PosStart, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Global.PosStart), Z Component Of(Position Of(Event Player)))) <= 1.88;
        Is On Ground(Event Player) == True;
        (Event Player).Checkpoint == False;
        (Event Player).Target == False;
        Horizontal Speed Of(Event Player) <= 8.6;
    }
    actions {
        For Player Variable(Event Player, ForLoop, False, Count Of(Global.PosCheckpoint), True);
            Set Player Variable At Index(Event Player, StatusTargetPreHit, (Event Player).ForLoop, False);
        End;
        Stop Chasing Player Variable(Event Player, TimeCurrent);
        Set Player Variable(Event Player, TimeCurrent, Null);
        Disallow Button(Event Player, Primary Fire);
        Clear Status(Event Player, Phased Out);
        Set Status(Event Player, Null, Phased Out, 9999);
        Set Invisible(Event Player, All);
        Wait(0.05, Ignore Condition);
        Allow Button(Event Player, Jump);
    }
}

rule ("Respawn") {
    event {
        Player Died;
        All;
        All;
    }
    actions {
        Abort If(Not((Event Player).SettingRun));
        If(Compare((Event Player).Mode, ==, Null));
            Disallow Button(Event Player, Jump);
            If(Not((Event Player).Finished));
                (Event Player).Attempts += 1;
            End;
            If((Event Player).NewBest);
                Set Player Variable(Event Player, NewBest, False);
                Set Player Variable(Event Player, Attempts, Null);
            End;
            Teleport(Event Player, Global.PosStart);
            Resurrect(Event Player);
            Set Status(Event Player, Null, Rooted, 0.5);
            Wait(0.016, Ignore Condition);
            Set Player Variable(Event Player, Finished, False);
            Set Player Variable(Event Player, Checkpoint, Null);
            Set Player Variable(Event Player, Target, Null);
            For Player Variable(Event Player, ForLoop, False, Count Of(Global.PosCheckpoint), True);
                Set Player Variable At Index(Event Player, StatusCheckpoint, (Event Player).ForLoop, False);
            End;
            For Player Variable(Event Player, ForLoop, False, Count Of(Global.PosTarget), True);
                Set Player Variable At Index(Event Player, StatusTarget, (Event Player).ForLoop, False);
                Set Player Variable At Index(Event Player, StatusTargetPreHit, (Event Player).ForLoop, False);
            End;
            Abort;
        End;
        If(And(Compare((Event Player).Mode, >=, True), Compare((Event Player).Mode, <=, 3)));
            If(Compare((Event Player).PosPracticeCheckpoint, ==, Null));
                Disallow Button(Event Player, Jump);
                Teleport(Event Player, Global.PosStart);
                Resurrect(Event Player);
                Set Status(Event Player, Null, Rooted, 0.5);
                Abort;
            End;
            Teleport(Event Player, (Event Player).PosPracticeCheckpoint);
            Resurrect(Event Player);
            Set Facing(Event Player, (Event Player).FacingPracticeCheckpoint, To World);
            Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -0.001), 0.001, To World, Cancel Contrary Motion);
            Apply Impulse(Event Player, (Event Player).VelocityPracticeCheckpoint, (Event Player).SpeedPracticeCheckpoint, To World, Cancel Contrary Motion);
            Clear Status(Event Player, Phased Out);
            Set Status(Event Player, Null, Phased Out, 9999);
    }
}

rule ("Clear Player from leaderboards if left") {
    event {
        Player Left Match;
        All;
        All;
    }
    actions {
        Abort If(Compare(Index Of Array Value(Global.PlayerArray, Event Player), ==, -1));
        Skip(Index Of Array Value(Global.PlayerArray, Event Player));
        Set Global Variable(PlayerFirst, Global.PlayerSecond);
        Set Global Variable(PlayerSecond, Global.PlayerThird);
        Set Global Variable(PlayerThird, Global.PlayerFourth);
        Set Global Variable(PlayerFourth, Global.PlayerFith);
        Set Global Variable(PlayerFith, Global.PlayerSixth);
        Set Global Variable(PlayerSixth, Global.PlayerSeventh);
        Set Global Variable(PlayerSeventh, Global.PlayerEighth);
        Set Global Variable(PlayerEighth, Null);
        Set Global Variable(PlayerArray, Array(Global.PlayerFirst, Global.PlayerSecond, Global.PlayerThird, Global.PlayerFourth, Global.PlayerFith, Global.PlayerSixth, Global.PlayerSeventh, Global.PlayerEighth));
    }
}

rule ("End Screen") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Match Time < 20;
    }
    actions {
        Pause Match Time;
        Set Global Variable(EndScreen, True);
        Set Global Variable(TeamFirst, If-Then-Else(Compare(Add(Add(Add(Add(If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(False, Team 1)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(False, Team 1)), Index Of Array Value(Global.PlayerArray, Null)), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(True, Team 1)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(True, Team 1)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(2, Team 1)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(2, Team 1)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(3, Team 1)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(3, Team 1)), Index Of Array Value(Global.PlayerArray, Null))), 4), <, Add(Add(Add(Add(If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(False, Team 2)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(False, Team 2)), Index Of Array Value(Global.PlayerArray, Null)), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(True, Team 2)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(True, Team 2)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(2, Team 2)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(2, Team 2)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(3, Team 2)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(3, Team 2)), Index Of Array Value(Global.PlayerArray, Null))), 4)), Team 1, Team 2));
        Set Global Variable(TeamSecond, Opposite Team Of(Global.TeamFirst));
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} Points", Global.TeamFirst, Add(Add(Add(Add(If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(False, Global.TeamFirst)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(False, Global.TeamFirst)), Index Of Array Value(Global.PlayerArray, Null)), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(True, Global.TeamFirst)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(True, Global.TeamFirst)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(2, Global.TeamFirst)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(2, Global.TeamFirst)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(3, Global.TeamFirst)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(3, Global.TeamFirst)), Index Of Array Value(Global.PlayerArray, Null))), 4), Null), Global.PosSpawn, 2.5, Clip Against Surfaces, String, Green, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst))), Add(Index Of Array Value(Global.PlayerArray, First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)))), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst))), First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst))), Custom String("Place holder", Null, Null, Null)), If-Then-Else(First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst))), (First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)))).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 0.3), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), True), Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), True)), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), True), Custom String("Place holder", Null, Null, Null)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), True), (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), True)).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 0.6), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 2), Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 2)), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 2), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 2), Custom String("Place holder", Null, Null, Null)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 2), (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 2)).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 0.9), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 3), Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 3)), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 3), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 3), Custom String("Place holder", Null, Null, Null)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 3), (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamFirst)), 3)).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 1.2), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} Points", Global.TeamSecond, Add(Add(Add(Add(If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(False, Global.TeamSecond)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(False, Global.TeamSecond)), Index Of Array Value(Global.PlayerArray, Null)), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(True, Global.TeamSecond)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(True, Global.TeamSecond)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(2, Global.TeamSecond)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(2, Global.TeamSecond)), Index Of Array Value(Global.PlayerArray, Null))), If-Then-Else(Compare(Index Of Array Value(Global.PlayerArray, Players In Slot(3, Global.TeamSecond)), !=, -1), Index Of Array Value(Global.PlayerArray, Players In Slot(3, Global.TeamSecond)), Index Of Array Value(Global.PlayerArray, Null))), 4), Null), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 1.8), Z Component Of(Global.PosSpawn)), 2.5, Clip Against Surfaces, String, Red, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond))), Add(Index Of Array Value(Global.PlayerArray, First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)))), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond))), First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond))), Custom String("Place holder", Null, Null, Null)), If-Then-Else(First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond))), (First Of(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)))).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 2.1), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), True), Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), True)), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), True), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), True), Custom String("Place holder", Null, Null, Null)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), True), (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), True)).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 2.4), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 2), Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 2)), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 2), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 2), Custom String("Place holder", Null, Null, Null)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 2), (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 2)).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 2.7), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
        Create In-World Text(All Players(All Teams), Custom String("{0} - {1} - {2} sec", If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 3), Add(Index Of Array Value(Global.PlayerArray, Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 3)), True), Add(Index Of Array Value(Global.PlayerArray, Null), True)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 3), Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 3), Custom String("Place holder", Null, Null, Null)), If-Then-Else(Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 3), (Value In Array(Filtered Array(Global.PlayerArray, Compare(Team Of(Current Array Element), ==, Global.TeamSecond)), 3)).TimeBest, 9999)), Vector(X Component Of(Global.PosSpawn), Subtract(Y Component Of(Global.PosSpawn), 3), Z Component Of(Global.PosSpawn)), 2, Clip Against Surfaces, String, White, Default Visibility);
    }
}

rule ("EndScreen forbid spawn leave") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.EndScreen != False;
        (Event Player).SettingRun == False;
        Is In Spawn Room(Event Player) == False;
    }
    actions {
        Teleport(Event Player, Global.PosSpawn);
    }
}

rule ("Teleport to EndScreen") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.EndScreen != False;
    }
    actions {
        Call Subroutine(TeleportSpawn);
    }
}

